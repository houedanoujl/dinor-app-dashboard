services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: dinor-dashboard
    container_name: dinor-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - vendor_cache:/var/www/html/vendor
      - node_modules_cache:/var/www/html/node_modules
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - ./storage:/var/www/html/storage
    networks:
      - dinor-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BrowserSync pour le hot reload PWA (développement uniquement)
  browsersync:
    image: node:18-alpine
    container_name: dinor-browsersync
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - /var/www/html/node_modules
    ports:
      - "3000:3000"  # BrowserSync UI
      - "3001:3001"  # BrowserSync proxy
    networks:
      - dinor-network
    depends_on:
      - app
    profiles:
      - dev  # Utiliser seulement en développement
    command: >
      sh -c "
        npm install -g browser-sync &&
        browser-sync start 
          --proxy 'dinor-app:80' 
          --files 'public/pwa/**/*.js,public/pwa/**/*.html,public/pwa/**/*.css,public/**/*.html' 
          --port 3001 
          --ui-port 3000 
          --host 0.0.0.0 
          --no-open 
          --reload-delay 1000
      "

  # PostgreSQL Database (compatible Supabase)
  db:
    image: postgres:15-alpine
    container_name: dinor-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - dinor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Adminer pour gérer PostgreSQL
  adminer:
    image: adminer:4
    container_name: dinor-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - dinor-network
    depends_on:
      - db

  redis:
    image: redis:7-alpine
    container_name: dinor-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - dinor-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

networks:
  dinor-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  vendor_cache:
    driver: local
  node_modules_cache:
    driver: local