#!/bin/bash

# Script de d√©ploiement complet pour Laravel Forge
# Inclut les migrations, cache, et configurations Analytics Firebase

echo "üöÄ D√©ploiement Forge - Dinor App avec Analytics Firebase"

# 1. Mise √† jour des d√©pendances
echo "üì¶ Installation des d√©pendances..."
composer install --no-dev --optimize-autoloader --no-interaction
npm ci --production

# 2. Configuration de l'environnement
echo "‚öôÔ∏è Configuration de l'environnement..."

# S'assurer que les variables Firebase sont dans .env
if ! grep -q "VITE_FIREBASE_ANALYTICS_ENABLED" .env; then
    echo "üî• Ajout des variables Firebase Analytics dans .env..."
    cat >> .env << 'EOL'

# Firebase Analytics Configuration
VITE_FIREBASE_ANALYTICS_ENABLED=true
VITE_FIREBASE_PROJECT_ID=dinor-app-2
VITE_FIREBASE_API_KEY=AIzaSyCq37nk-Cjt0r3n-QDqZ6R2rB0JOSJQtfM
VITE_ANALYTICS_DEBUG_MODE=false
EOL
fi

# 3. Cache et optimisations
echo "üßπ Nettoyage et optimisation des caches..."
php artisan config:clear
php artisan cache:clear
php artisan route:clear
php artisan view:clear

# 4. G√©n√©rer les caches optimis√©s
echo "‚ö° G√©n√©ration des caches de production..."
php artisan config:cache
php artisan route:cache
php artisan view:cache

# 5. Migrations de base de donn√©es
echo "üóÑÔ∏è Ex√©cution des migrations..."
php artisan migrate --force

# V√©rifier que la table analytics_events existe
if ! php artisan migrate:status | grep -q "create_analytics_events_table"; then
    echo "‚ùå ERREUR: Migration analytics_events manquante"
    exit 1
fi

# 6. Seeders de production si n√©cessaire
if [ "$1" = "--seed" ]; then
    echo "üå± Ex√©cution des seeders de production..."
    php artisan db:seed --class=ProductionDataSeeder
fi

# 7. Permissions et liens symboliques
echo "üîó Configuration des liens symboliques et permissions..."
php artisan storage:link

# Cr√©er les dossiers n√©cessaires s'ils n'existent pas
mkdir -p storage/logs
mkdir -p storage/framework/cache
mkdir -p storage/framework/sessions
mkdir -p storage/framework/views
mkdir -p public/images/{recipes,tips,events,banners}

# Permissions (adapt√©es pour Forge)
chmod -R 755 storage/
chmod -R 755 bootstrap/cache/
chown -R forge:forge storage/ bootstrap/cache/ || echo "‚ö†Ô∏è Impossible de changer les permissions (normal sur Forge)"

# 8. Build des assets frontend
echo "üé® Build des assets frontend..."

# PWA Build
if [ -f "vite.pwa.config.js" ]; then
    echo "üì± Build PWA..."
    npm run pwa:build
fi

# Build principal
npm run build

# 9. Compilation SCSS si n√©cessaire
if command -v sass &> /dev/null; then
    echo "üé® Compilation SCSS..."
    npm run scss:build
fi

# 10. Tests de sant√© post-d√©ploiement
echo "üîç Tests de sant√©..."

# Test de la base de donn√©es
if ! php artisan migrate:status &> /dev/null; then
    echo "‚ùå ERREUR: Probl√®me de connexion √† la base de donn√©es"
    exit 1
fi

# Test des routes API Analytics
if ! php artisan route:list | grep -q "api/analytics/event"; then
    echo "‚ùå ERREUR: Routes Analytics manquantes"
    exit 1
fi

# Test de l'existence des widgets Filament
if [ ! -f "app/Filament/Widgets/FirebaseAnalyticsWidget.php" ]; then
    echo "‚ùå ERREUR: Widget Analytics manquant"
    exit 1
fi

# Test de la configuration Firebase
if [ ! -f "src/pwa/services/firebaseConfig.js" ]; then
    echo "‚ùå ERREUR: Configuration Firebase manquante"
    exit 1
fi

# 11. Red√©marrage des services si n√©cessaire
echo "üîÑ Red√©marrage des services..."

# Queue workers (si utilis√©s)
if [ -f "artisan" ] && php artisan queue:restart &> /dev/null; then
    echo "‚úÖ Queue red√©marr√©e"
fi

# Cache Redis (si utilis√©)
if command -v redis-cli &> /dev/null; then
    redis-cli flushdb || echo "‚ö†Ô∏è Redis non disponible"
fi

# Supervisor (si configur√©)
if command -v supervisorctl &> /dev/null; then
    sudo supervisorctl reread || echo "‚ö†Ô∏è Supervisor non configur√©"
    sudo supervisorctl update || echo "‚ö†Ô∏è Supervisor non configur√©"
fi

# 12. Rapport de d√©ploiement
echo ""
echo "‚úÖ D√âPLOIEMENT TERMIN√â !"
echo ""
echo "üìä Composants install√©s :"
echo "   ‚úì Laravel Backend avec Analytics API"
echo "   ‚úì Firebase Analytics SDK (PWA)"
echo "   ‚úì Widgets Dashboard Filament" 
echo "   ‚úì Table analytics_events migr√©e"
echo "   ‚úì Navigation tactile corrig√©e"
echo ""
echo "üîß Configuration v√©rifi√©e :"
echo "   ‚úì Base de donn√©es : $(php artisan migrate:status | wc -l) migrations"
echo "   ‚úì Cache : Configuration mise en cache"
echo "   ‚úì Assets : Build termin√©"
echo "   ‚úì Firebase : Cl√©s configur√©es"
echo ""
echo "üåê URLs importantes :"
echo "   üìã Dashboard Admin: $(php artisan route:list | grep 'admin' | head -1 | awk '{print $4}' || echo '/admin')"
echo "   üì° API Analytics: /api/analytics/metrics"
echo "   üì± PWA: /pwa"
echo ""
echo "üîç Pour tester les Analytics :"
echo "   curl -X POST $(php artisan route:list | grep 'api/analytics/event' | awk '{print $4}' || echo '/api/analytics/event') -H 'Content-Type: application/json' -d '{\"event_type\":\"test\",\"session_id\":\"test123\",\"timestamp\":$(date +%s)000}'"
echo ""
echo "üéØ D√©ploiement Analytics Firebase : COMPLET !"

# 13. Logs finaux
echo "üìù Logs r√©cents :" 
tail -5 storage/logs/laravel.log 2>/dev/null || echo "Pas de logs r√©cents"

exit 0