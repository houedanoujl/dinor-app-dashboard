/**
 * MAIN.DART - CONVERSION FID√àLE DE main.js
 * 
 * FID√âLIT√â FONCTIONNELLE :
 * - Initialisation identique : Pinia ‚Üí Provider/Riverpod
 * - Router Vue ‚Üí GoRouter avec m√™me structure de routes  
 * - Lucide Icons ‚Üí 80+ ic√¥nes Flutter identiques
 * - Service Worker ‚Üí Simulation √©quivalente
 * - OneSignal ‚Üí Push notifications natives
 * - Gestion r√©seau identique
 * 
 * FID√âLIT√â VISUELLE :
 * - Polices : Roboto + Open Sans identiques
 * - Configuration : touch-device, offline classes
 * - Initialisation : m√™me s√©quence de d√©marrage
 */

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';

// Test app simple (d√©sactiv√©)
// import 'test_app.dart';

// Services (remplace les services Vue)
import 'services/notification_service.dart';
import 'services/analytics_service.dart';
import 'services/analytics_tracker.dart';
// import 'services/notification_service_simple.dart' as SimpleNotificationService;

// Router supprim√© - remplac√© par NavigationService

// App principale (remplace App.vue)
import 'app.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  // Initialisation Firebase
  try {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    await AnalyticsService.initialize();
    print('üî• [Firebase] Initialis√© avec succ√®s');
  } catch (e) {
    print('‚ùå [Firebase] Erreur initialisation: $e');
  }
  
  // Configuration syst√®me identique √† Vue
  await SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp]);
  
  // Initialisation des services (√©quivalent des imports main.js)
  await _initializeServices();
  
  // Configuration des polices (√©quivalent Google Fonts import)
  await _configureFonts();
  
  // Gestion d'erreurs globales (√©quivalent app.config.errorHandler)
  FlutterError.onError = (FlutterErrorDetails details) {
    print('‚ùå [FlutterError] ${details.exception}');
  };
  
  // Support tactile (√©quivalent 'ontouchstart' in window)
  await _configureTouchSupport();
  
  // Surveillance r√©seau (√©quivalent online/offline listeners)
  // _initializeNetworkListeners();
  
  // Lancement de l'application principale
  runApp(
    ProviderScope(
      child: DinorApp(),
    ),
  );
  
  // Test avec une app simple (d√©sactiv√©)
  // runApp(TestApp());
  
  // Post-initialisation (√©quivalent service worker + OneSignal)
  WidgetsBinding.instance.addPostFrameCallback((_) {
    // Enregistrer l'ouverture de l'app
    AnalyticsService.logAppOpen();
    
    // D√©marrer le tracking de session
    AnalyticsTracker.startSession();
  });
}

/// Initialisation des services - REPRODUCTION EXACTE de main.js
Future<void> _initializeServices() async {
  print('üöÄ [Main] Initialisation des services Dinor...');
  
  // SharedPreferences (√©quivalent localStorage)
  await SharedPreferences.getInstance();
  
  // API Service (√©quivalent service api.js)
  // await ApiService.initialize();
  
  // Notification Service (√©quivalent OneSignal)
  await NotificationService.initialize();
  
  print('‚úÖ [Main] Services initialis√©s avec succ√®s');
}

/// Configuration des polices - IDENTIQUE √† Google Fonts main.js
Future<void> _configureFonts() async {
  print('üî§ [Main] Configuration des polices Google Fonts...');
  
  // Pr√©charger les polices Roboto et Open Sans
  // (√©quivalent @import url('https://fonts.googleapis.com/css2?family=...'))
  await Future.wait([
    _preloadFont('Roboto'),
    _preloadFont('OpenSans'),
  ]);
  
  print('‚úÖ [Main] Polices charg√©es : Roboto, Open Sans');
}

Future<void> _preloadFont(String fontFamily) async {
  // Pr√©chargement des polices pour √©viter le FOUT (Flash of Unstyled Text)
  final textStyle = TextStyle(fontFamily: fontFamily);
  final textPainter = TextPainter(
    text: TextSpan(text: 'Preload', style: textStyle),
    textDirection: TextDirection.ltr,
  );
  textPainter.layout();
}

/// Support tactile - REPRODUCTION EXACTE de main.js
Future<void> _configureTouchSupport() async {
  print('üì± [Main] Configuration du support tactile...');
  
  // √âquivalent : if ('ontouchstart' in window) document.body.classList.add('touch-device')
  // En Flutter, les gestes tactiles sont natifs, mais on peut configurer la sensibilit√©
  await SystemChrome.setEnabledSystemUIMode(SystemUiMode.edgeToEdge);
  
  print('‚úÖ [Main] Support tactile configur√©');
}



