import 'package:onesignal_flutter/onesignal_flutter.dart';
import 'package:flutter/foundation.dart';

class NotificationService {
  static const String _appId = "d98be3fd-e812-47ea-a075-bca9a16b4f6b";
  
  static Future<void> initialize() async {
    debugPrint('üîî [NotificationService] Initialisation OneSignal...');
    
    try {
      // Configuration OneSignal
      OneSignal.Debug.setLogLevel(OSLogLevel.verbose);
      OneSignal.initialize(_appId);
      
      // Demande de permission
      await requestPermission();
      
      // Configuration des √©v√©nements
      _setupEventListeners();
      
      debugPrint('‚úÖ [NotificationService] OneSignal initialis√© avec succ√®s');
    } catch (e) {
      debugPrint('‚ùå [NotificationService] Erreur d\'initialisation: $e');
    }
  }
  
  static Future<void> requestPermission() async {
    try {
      debugPrint('üì± [NotificationService] Demande de permission...');
      
      final permission = await OneSignal.Notifications.requestPermission(true);
      debugPrint('üì± [NotificationService] Permission accord√©e: $permission');
    } catch (e) {
      debugPrint('‚ùå [NotificationService] Erreur permission: $e');
    }
  }
  
  static void _setupEventListeners() {
    try {
      // Notification re√ßue en foreground
      OneSignal.Notifications.addForegroundWillDisplayListener((event) {
        debugPrint('üîî [NotificationService] Notification re√ßue en foreground: ${event.notification.title}');
        
        // Afficher la notification m√™me en foreground
        event.preventDefault();
        event.notification.display();
      });
      
      // Notification cliqu√©e
      OneSignal.Notifications.addClickListener((event) {
        debugPrint('üëÜ [NotificationService] Notification cliqu√©e: ${event.notification.title}');
        
        // G√©rer l'URL de redirection si pr√©sente
        final data = event.notification.additionalData;
        if (data != null && data.containsKey('url')) {
          _handleNotificationUrl(data['url']);
        }
      });
      
      // Changement de l'ID utilisateur
      OneSignal.User.pushSubscription.addObserver((state) {
        debugPrint('üë§ [NotificationService] Subscription chang√©e');
        if (state.current.id != null) {
          debugPrint('üë§ [NotificationService] Subscription ID: ${state.current.id}');
        }
      });
      
      debugPrint('‚úÖ [NotificationService] Event listeners configur√©s');
    } catch (e) {
      debugPrint('‚ùå [NotificationService] Erreur configuration listeners: $e');
    }
  }
  
  static void _handleNotificationUrl(String url) {
    debugPrint('üîó [NotificationService] Redirection vers: $url');
    // Ici vous pouvez impl√©menter la navigation vers l'URL
    // Exemple : NavigationService.pushNamed(url);
  }
  
  static Future<String?> getUserId() async {
    try {
      final userId = OneSignal.User.getOnesignalId();
      debugPrint('üë§ [NotificationService] User ID: $userId');
      return userId;
    } catch (e) {
      debugPrint('‚ùå [NotificationService] Erreur getUserId: $e');
      return null;
    }
  }
  
  static void setExternalUserId(String userId) {
    try {
      OneSignal.login(userId);
      debugPrint('üë§ [NotificationService] External User ID d√©fini: $userId');
    } catch (e) {
      debugPrint('‚ùå [NotificationService] Erreur setExternalUserId: $e');
    }
  }
  
  static void addTag(String key, String value) {
    try {
      OneSignal.User.addTags({key: value});
      debugPrint('üè∑Ô∏è [NotificationService] Tag ajout√©: $key = $value');
    } catch (e) {
      debugPrint('‚ùå [NotificationService] Erreur addTag: $e');
    }
  }
  
  static void removeTag(String key) {
    try {
      OneSignal.User.removeTags([key]);
      debugPrint('üè∑Ô∏è [NotificationService] Tag supprim√©: $key');
    } catch (e) {
      debugPrint('‚ùå [NotificationService] Erreur removeTag: $e');
    }
  }
} 