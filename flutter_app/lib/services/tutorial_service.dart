/**
 * TUTORIAL_SERVICE.DART - SERVICE POUR G√âRER LES TUTORIELS
 * 
 * FONCTIONNALIT√âS :
 * - Gestion centralis√©e des tutoriels
 * - Diff√©rents types de tutoriels (premi√®re utilisation, nouvelles fonctionnalit√©s, etc.)
 * - Conditions d'affichage intelligentes
 * - Persistence des pr√©f√©rences utilisateur
 */

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:lucide_icons/lucide_icons.dart';
import '../components/common/app_tutorial.dart';

class TutorialService {
  static const String _firstLaunchKey = 'first_launch_completed';
  static const String _navigationTutorialKey = 'navigation_tutorial_shown';
  static const String _pagesTutorialKey = 'dynamic_pages_tutorial_shown';

  // V√©rifier si c'est le premier lancement
  static Future<bool> isFirstLaunch() async {
    final prefs = await SharedPreferences.getInstance();
    final hasCompleted = prefs.getBool(_firstLaunchKey) ?? false;
    return !hasCompleted;
  }

  // Marquer le premier lancement comme termin√©
  static Future<void> markFirstLaunchComplete() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_firstLaunchKey, true);
  }

  // Tutoriel principal de premi√®re utilisation
  static List<TutorialStep> getWelcomeTutorial() => [
    TutorialStep(
      title: 'üçΩÔ∏è Bienvenue sur Dinor !',
      description: 'Votre chef de poche vous souhaite la bienvenue ! D√©couvrez une exp√©rience culinaire unique avec des milliers de recettes, astuces et bien plus.',
    ),
    TutorialStep(
      title: 'üß≠ Navigation simple',
      description: 'Utilisez la barre dor√©e en bas de l\'√©cran pour naviguer entre les sections : Accueil, Recettes, Astuces, √âv√©nements, DinorTV et votre Profil.',
    ),
    TutorialStep(
      title: 'üì± Pages personnalis√©es',
      description: 'D√©couvrez des pages suppl√©mentaires ajout√©es sp√©cialement pour vous ! Si vous en voyez plus de 6, faites d√©filer horizontalement la barre de navigation.',
    ),
    TutorialStep(
      title: '‚≠ê Vos favoris',
      description: 'Appuyez sur le c≈ìur pour ajouter vos recettes, astuces et vid√©os pr√©f√©r√©es √† votre collection personnelle.',
    ),
    TutorialStep(
      title: 'ü§ù Partage facile',
      description: 'Partagez vos d√©couvertes culinaires avec vos amis gr√¢ce au bouton de partage pr√©sent sur chaque contenu.',
    ),
    TutorialStep(
      title: 'üöÄ C\'est parti !',
      description: 'Vous √™tes maintenant pr√™t √† explorer l\'univers Dinor. Bon voyage culinaire et... bon app√©tit !',
    ),
  ];

  // Tutoriel sp√©cifique pour les pages dynamiques
  static List<TutorialStep> getNavigationTutorial() => [
    TutorialStep(
      title: 'üìÑ Nouvelles pages !',
      description: 'De nouvelles pages ont √©t√© ajout√©es √† votre application ! Elles apparaissent dans la barre de navigation en bas.',
    ),
    TutorialStep(
      title: 'üëÜ Navigation tactile',
      description: 'Si vous voyez plus de 6 onglets, vous pouvez faire d√©filer horizontalement la barre de navigation pour acc√©der √† toutes les pages.',
    ),
    TutorialStep(
      title: 'üåê Contenu externe',
      description: 'Certaines pages peuvent s\'ouvrir dans un navigateur externe ou dans une vue int√©gr√©e selon leur configuration.',
    ),
  ];

  // Tutoriel pour les fonctionnalit√©s avanc√©es
  static List<TutorialStep> getAdvancedFeaturesTutorial() => [
    TutorialStep(
      title: 'üîç Recherche intelligente',
      description: 'Utilisez la barre de recherche pour trouver rapidement vos recettes par ingr√©dients, type de plat ou difficult√©.',
    ),
    TutorialStep(
      title: 'üèÜ Tournois culinaires',
      description: 'Participez aux tournois de pronostics et d√©fis culinaires pour gagner des r√©compenses !',
    ),
    TutorialStep(
      title: 'üì∫ Dinor TV',
      description: 'Regardez des vid√©os exclusives, des tutoriels de chefs et des √©missions culinaires en direct.',
    ),
  ];

  // Afficher le tutoriel de bienvenue si n√©cessaire
  static Future<void> showWelcomeTutorialIfNeeded(BuildContext context) async {
    final isFirst = await isFirstLaunch();
    if (isFirst && context.mounted) {
      TutorialOverlay.show(
        context: context,
        steps: getWelcomeTutorial(),
        tutorialKey: 'welcome_tutorial',
        onComplete: () async {
          await markFirstLaunchComplete();
          print('‚úÖ [TutorialService] Tutoriel de bienvenue termin√©');
        },
      );
    }
  }

  // Afficher le tutoriel de navigation si de nouvelles pages sont d√©tect√©es
  static Future<void> showNavigationTutorialIfNeeded(
    BuildContext context, 
    int currentPageCount
  ) async {
    final prefs = await SharedPreferences.getInstance();
    final lastKnownPageCount = prefs.getInt('last_known_page_count') ?? 6;
    final hasShownTutorial = prefs.getBool(_navigationTutorialKey) ?? false;

    // Si on a plus de pages qu'avant et qu'on n'a pas encore montr√© le tutoriel
    if (currentPageCount > lastKnownPageCount && !hasShownTutorial && context.mounted) {
      TutorialOverlay.show(
        context: context,
        steps: getNavigationTutorial(),
        tutorialKey: 'navigation_tutorial',
        onComplete: () async {
          await prefs.setBool(_navigationTutorialKey, true);
          print('‚úÖ [TutorialService] Tutoriel de navigation termin√©');
        },
      );
    }

    // Sauvegarder le nombre actuel de pages
    await prefs.setInt('last_known_page_count', currentPageCount);
  }

  // R√©initialiser tous les tutoriels (pour le debug/test)
  static Future<void> resetAllTutorials() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear();
    print('üîÑ [TutorialService] Tous les tutoriels r√©initialis√©s');
  }

  // Marquer un tutoriel sp√©cifique comme vu
  static Future<void> markTutorialAsSeen(String tutorialKey) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('tutorial_$tutorialKey', true);
  }

  // V√©rifier si un tutoriel a √©t√© vu
  static Future<bool> hasTutorialBeenSeen(String tutorialKey) async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool('tutorial_$tutorialKey') ?? false;
  }

  // Afficher un tutoriel personnalis√©
  static void showCustomTutorial(
    BuildContext context, {
    required String title,
    required String description,
    required String tutorialKey,
    VoidCallback? onComplete,
    IconData? icon,
  }) {
    final steps = [
      TutorialStep(
        title: title,
        description: description,
      )
    ];

    TutorialOverlay.show(
      context: context,
      steps: steps,
      tutorialKey: tutorialKey,
      onComplete: onComplete,
    );
  }

  // Obtenir des statistiques sur l'utilisation des tutoriels
  static Future<Map<String, bool>> getTutorialStatistics() async {
    final prefs = await SharedPreferences.getInstance();
    return {
      'first_launch_completed': prefs.getBool(_firstLaunchKey) ?? false,
      'navigation_tutorial_shown': prefs.getBool(_navigationTutorialKey) ?? false,
      'dynamic_pages_tutorial_shown': prefs.getBool(_pagesTutorialKey) ?? false,
      'welcome_tutorial_completed': prefs.getBool('tutorial_welcome_tutorial') ?? false,
    };
  }
}