/**
 * TEST_ANALYTICS_INTEGRATION.DART - SCRIPT DE TEST FIREBASE ANALYTICS
 * 
 * Ce script permet de tester l'int√©gration Firebase Analytics
 * et de v√©rifier que tous les √©v√©nements sont correctement track√©s.
 */

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'services/analytics_service.dart';
import 'services/analytics_tracker.dart';

class TestAnalyticsApp extends StatelessWidget {
  const TestAnalyticsApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Test Firebase Analytics',
      theme: ThemeData(
        primarySwatch: Colors.orange,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: const TestAnalyticsScreen(),
    );
  }
}

class TestAnalyticsScreen extends StatefulWidget {
  const TestAnalyticsScreen({Key? key}) : super(key: key);

  @override
  State<TestAnalyticsScreen> createState() => _TestAnalyticsScreenState();
}

class _TestAnalyticsScreenState extends State<TestAnalyticsScreen> with AnalyticsScreenMixin {
  @override
  String get screenName => 'test_analytics';

  @override
  void initState() {
    super.initState();
    print('üß™ [TestAnalytics] √âcran de test initialis√©');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Test Firebase Analytics'),
        backgroundColor: Colors.orange,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            _buildSection(
              title: 'üìä √âv√©nements d\'Application',
              children: [
                _buildTestButton(
                  'Test Installation',
                  () => _testAppInstall(),
                ),
                _buildTestButton(
                  'Test Premi√®re Ouverture',
                  () => _testFirstOpen(),
                ),
                _buildTestButton(
                  'Test Ouverture App',
                  () => _testAppOpen(),
                ),
              ],
            ),
            const SizedBox(height: 20),
            _buildSection(
              title: 'üß≠ √âv√©nements de Navigation',
              children: [
                _buildTestButton(
                  'Test Visite √âcran',
                  () => _testScreenView(),
                ),
                _buildTestButton(
                  'Test Navigation',
                  () => _testNavigation(),
                ),
                _buildTestButton(
                  'Test Temps √âcran',
                  () => _testScreenTime(),
                ),
              ],
            ),
            const SizedBox(height: 20),
            _buildSection(
              title: 'üëÄ √âv√©nements de Contenu',
              children: [
                _buildTestButton(
                  'Test Consultation Recette',
                  () => _testViewContent('recipe'),
                ),
                _buildTestButton(
                  'Test Consultation Astuce',
                  () => _testViewContent('tip'),
                ),
                _buildTestButton(
                  'Test Recherche',
                  () => _testSearch(),
                ),
              ],
            ),
            const SizedBox(height: 20),
            _buildSection(
              title: 'üñ±Ô∏è √âv√©nements d\'Interaction',
              children: [
                _buildTestButton(
                  'Test Clic Bouton',
                  () => _testButtonClick(),
                ),
                _buildTestButton(
                  'Test Like',
                  () => _testLikeAction(),
                ),
                _buildTestButton(
                  'Test Favoris',
                  () => _testFavoriteAction(),
                ),
                _buildTestButton(
                  'Test Partage',
                  () => _testShareContent(),
                ),
              ],
            ),
            const SizedBox(height: 20),
            _buildSection(
              title: 'üîê √âv√©nements d\'Authentification',
              children: [
                _buildTestButton(
                  'Test Connexion',
                  () => _testLogin(),
                ),
                _buildTestButton(
                  'Test Inscription',
                  () => _testSignUp(),
                ),
                _buildTestButton(
                  'Test D√©connexion',
                  () => _testLogout(),
                ),
              ],
            ),
            const SizedBox(height: 20),
            _buildSection(
              title: 'üìà M√©triques d\'Engagement',
              children: [
                _buildTestButton(
                  'Test Engagement Quotidien',
                  () => _testDailyEngagement(),
                ),
                _buildTestButton(
                  'Test Session Longue',
                  () => _testLongSession(),
                ),
                _buildTestButton(
                  'Test Utilisation Fonctionnalit√©',
                  () => _testFeatureUsage(),
                ),
              ],
            ),
            const SizedBox(height: 20),
            _buildSection(
              title: '‚ö†Ô∏è Gestion d\'Erreurs',
              children: [
                _buildTestButton(
                  'Test Erreur Utilisateur',
                  () => _testUserError(),
                ),
                _buildTestButton(
                  'Test Performance',
                  () => _testPerformance(),
                ),
              ],
            ),
            const SizedBox(height: 20),
            _buildSection(
              title: 'üéØ √âv√©nements Personnalis√©s',
              children: [
                _buildTestButton(
                  'Test √âv√©nement Personnalis√©',
                  () => _testCustomEvent(),
                ),
                _buildTestButton(
                  'Test Propri√©t√©s Utilisateur',
                  () => _testUserProperties(),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSection({
    required String title,
    required List<Widget> children,
  }) {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.orange,
              ),
            ),
            const SizedBox(height: 12),
            ...children,
          ],
        ),
      ),
    );
  }

  Widget _buildTestButton(String label, VoidCallback onPressed) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: ElevatedButton(
        onPressed: () {
          onPressed();
          _showSuccessMessage('√âv√©nement "$label" track√© avec succ√®s !');
        },
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.orange,
          foregroundColor: Colors.white,
        ),
        child: Text(label),
      ),
    );
  }

  void _showSuccessMessage(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        duration: const Duration(seconds: 2),
      ),
    );
  }

  // === TESTS DES √âV√âNEMENTS ===

  Future<void> _testAppInstall() async {
    await AnalyticsService.logAppInstall();
    print('‚úÖ [Test] √âv√©nement app_install track√©');
  }

  Future<void> _testFirstOpen() async {
    await AnalyticsService.logFirstOpen();
    print('‚úÖ [Test] √âv√©nement first_open track√©');
  }

  Future<void> _testAppOpen() async {
    await AnalyticsService.logAppOpen();
    print('‚úÖ [Test] √âv√©nement app_open track√©');
  }

  Future<void> _testScreenView() async {
    await AnalyticsService.logScreenView(
      screenName: 'test_screen',
      screenClass: 'TestScreen',
    );
    print('‚úÖ [Test] √âv√©nement screen_view track√©');
  }

  Future<void> _testNavigation() async {
    await AnalyticsService.logNavigation(
      from: 'test_screen',
      to: 'home_screen',
      method: 'button',
    );
    print('‚úÖ [Test] √âv√©nement navigation track√©');
  }

  Future<void> _testScreenTime() async {
    await AnalyticsService.logScreenTime(
      screenName: 'test_screen',
      durationSeconds: 120,
    );
    print('‚úÖ [Test] √âv√©nement screen_time track√©');
  }

  Future<void> _testViewContent(String contentType) async {
    await AnalyticsService.logViewContent(
      contentType: contentType,
      contentId: 'test_123',
      contentName: 'Test $contentType',
    );
    print('‚úÖ [Test] √âv√©nement view_content track√© pour $contentType');
  }

  Future<void> _testSearch() async {
    await AnalyticsService.logSearch(
      searchTerm: 'test search',
      category: 'recipes',
      resultsCount: 5,
    );
    print('‚úÖ [Test] √âv√©nement search track√©');
  }

  Future<void> _testButtonClick() async {
    AnalyticsTracker.trackButtonClick(
      buttonName: 'test_button',
      screenName: 'test_analytics',
      additionalData: {
        'test_param': 'test_value',
      },
    );
    print('‚úÖ [Test] √âv√©nement button_click track√©');
  }

  Future<void> _testLikeAction() async {
    await AnalyticsService.logLikeAction(
      contentType: 'recipe',
      contentId: 'test_recipe_123',
      isLiked: true,
    );
    print('‚úÖ [Test] √âv√©nement like_content track√©');
  }

  Future<void> _testFavoriteAction() async {
    await AnalyticsService.logFavoriteAction(
      contentType: 'recipe',
      contentId: 'test_recipe_123',
      isFavorited: true,
    );
    print('‚úÖ [Test] √âv√©nement add_to_favorites track√©');
  }

  Future<void> _testShareContent() async {
    await AnalyticsService.logShareContent(
      contentType: 'recipe',
      contentId: 'test_recipe_123',
      method: 'copy_link',
    );
    print('‚úÖ [Test] √âv√©nement share track√©');
  }

  Future<void> _testLogin() async {
    await AnalyticsService.logLogin(method: 'email');
    print('‚úÖ [Test] √âv√©nement login track√©');
  }

  Future<void> _testSignUp() async {
    await AnalyticsService.logSignUp(method: 'email');
    print('‚úÖ [Test] √âv√©nement sign_up track√©');
  }

  Future<void> _testLogout() async {
    await AnalyticsService.logLogout();
    print('‚úÖ [Test] √âv√©nement logout track√©');
  }

  Future<void> _testDailyEngagement() async {
    await AnalyticsService.logDailyEngagement();
    print('‚úÖ [Test] √âv√©nement daily_engagement track√©');
  }

  Future<void> _testLongSession() async {
    await AnalyticsService.logLongSession(durationMinutes: 10);
    print('‚úÖ [Test] √âv√©nement long_session track√©');
  }

  Future<void> _testFeatureUsage() async {
    await AnalyticsService.logFeatureUsage(
      featureName: 'test_feature',
      category: 'test_category',
      additionalData: {
        'test_param': 'test_value',
      },
    );
    print('‚úÖ [Test] √âv√©nement feature_usage track√©');
  }

  Future<void> _testUserError() async {
    await AnalyticsService.logUserError(
      errorType: 'test_error',
      errorMessage: 'Test error message',
      screenName: 'test_analytics',
    );
    print('‚úÖ [Test] √âv√©nement user_error track√©');
  }

  Future<void> _testPerformance() async {
    await AnalyticsService.logPerformance(
      actionName: 'test_action',
      durationMs: 500,
      category: 'test_category',
    );
    print('‚úÖ [Test] √âv√©nement performance_timing track√©');
  }

  Future<void> _testCustomEvent() async {
    await AnalyticsService.logCustomEvent(
      eventName: 'test_custom_event',
      parameters: {
        'test_param': 'test_value',
        'test_number': 42,
      },
    );
    print('‚úÖ [Test] √âv√©nement personnalis√© track√©');
  }

  Future<void> _testUserProperties() async {
    await AnalyticsService.setUserId('test_user_123');
    await AnalyticsService.setUserProperty(
      name: 'test_property',
      value: 'test_value',
    );
    print('‚úÖ [Test] Propri√©t√©s utilisateur d√©finies');
  }
}

// Fonction principale pour tester l'int√©gration
Future<void> testAnalyticsIntegration() async {
  try {
    // Initialiser Firebase
    await Firebase.initializeApp();
    await AnalyticsService.initialize();
    
    print('‚úÖ [TestAnalytics] Firebase Analytics initialis√© avec succ√®s');
    
    // D√©marrer le tracking de session
    AnalyticsTracker.startSession();
    
    print('‚úÖ [TestAnalytics] Session de test d√©marr√©e');
    print('üß™ [TestAnalytics] Pr√™t pour les tests d\'√©v√©nements');
    
  } catch (e) {
    print('‚ùå [TestAnalytics] Erreur initialisation: $e');
  }
} 