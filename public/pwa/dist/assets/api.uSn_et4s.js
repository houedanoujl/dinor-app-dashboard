const e=new class{constructor(){this.baseURL=this.getBaseURL(),this.cache=new Map,this.cacheTimeout=3e5}getBaseURL(){return`${window.location.origin}/api/v1`}async request(e,t={}){const s=`${this.baseURL}${e}`,r=`${s}_${JSON.stringify(t)}`;if(!t.method||"GET"===t.method){const e=this.cache.get(r);if(e&&Date.now()-e.timestamp<this.cacheTimeout)return e.data}const n={headers:{"Content-Type":"application/json",Accept:"application/json","X-Requested-With":"XMLHttpRequest",...t.headers},...t};try{const e=await fetch(s,n);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const a=await e.json();return t.method&&"GET"!==t.method||this.cache.set(r,{data:a,timestamp:Date.now()}),a}catch(a){throw console.error("API Request failed:",a),a}}async getRecipes(e={}){const t=new URLSearchParams(e).toString(),s="/recipes"+(t?`?${t}`:"");return this.request(s)}async getRecipe(e){return this.request(`/recipes/${e}`)}async getTips(e={}){const t=new URLSearchParams(e).toString(),s="/tips"+(t?`?${t}`:"");return this.request(s)}async getTip(e){return this.request(`/tips/${e}`)}async getEvents(e={}){const t=new URLSearchParams(e).toString(),s="/events"+(t?`?${t}`:"");return this.request(s)}async getEvent(e){return this.request(`/events/${e}`)}async getPages(e={}){const t=new URLSearchParams(e).toString(),s="/pages"+(t?`?${t}`:"");return this.request(s)}async getPage(e){return this.request(`/pages/${e}`)}async getVideos(e={}){const t=new URLSearchParams(e).toString(),s="/dinor-tv"+(t?`?${t}`:"");return this.request(s)}async getVideo(e){return this.request(`/dinor-tv/${e}`)}async toggleLike(e,t){return this.request(`/${e}/${t}/like`,{method:"POST"})}async getComments(e,t){return this.request(`/${e}/${t}/comments`)}async addComment(e,t,s){return this.request(`/${e}/${t}/comments`,{method:"POST",body:JSON.stringify({content:s})})}async getCategories(){return this.request("/categories")}async search(e,t=null){const s={q:e};t&&(s.type=t);const r=new URLSearchParams(s).toString();return this.request(`/search?${r}`)}clearCache(){this.cache.clear()}cleanCache(){const e=Date.now();for(const[t,s]of this.cache.entries())e-s.timestamp>=this.cacheTimeout&&this.cache.delete(t)}};export{e as a};
