#!/bin/bash

cd /home/forge/new.dinorapp.com

# Fonction pour les logs (compatible Forge)
log_info() {
    echo "‚ÑπÔ∏è  $1"
}

log_success() {
    echo "‚úÖ $1"
}

log_warning() {
    echo "‚ö†Ô∏è  $1"
}

log_error() {
    echo "‚ùå $1"
}

echo "üöÄ === D√âPLOIEMENT DINOR DASHBOARD FORGE ==="
echo ""

# 1. Mise en mode maintenance
log_info "üîÑ Mise en mode maintenance..."
$FORGE_PHP artisan down --retry=60 --render="errors::503" --secret="dinor-maintenance-secret" || log_warning "Impossible de mettre en mode maintenance"

# 2. Nettoyage pr√©alable des conflits Git
log_info "üßπ Nettoyage des conflits Git potentiels..."

# Supprimer les fichiers de logs qui causent des conflits
rm -rf storage/logs/*.log 2>/dev/null || true
rm -rf storage/logs/laravel.log 2>/dev/null || true

# Nettoyer les fichiers temporaires qui peuvent causer des conflits
rm -rf storage/framework/cache/data/* 2>/dev/null || true
rm -rf storage/framework/sessions/* 2>/dev/null || true
rm -rf storage/framework/views/*.php 2>/dev/null || true
rm -rf bootstrap/cache/*.php 2>/dev/null || true

# Nettoyer le cache Git
git rm --cached storage/logs/*.log 2>/dev/null || true
git rm --cached storage/logs/laravel.log 2>/dev/null || true

# Corriger les permissions PWA avant git pull
log_info "üîê Correction des permissions PWA..."
chown -R forge:forge public/pwa/ 2>/dev/null || true
chmod -R 755 public/pwa/ 2>/dev/null || true
rm -rf public/pwa/dist/* 2>/dev/null || true

# Stash les changements locaux s'il y en a (s√©curit√©)
if ! git diff-index --quiet HEAD -- 2>/dev/null; then
    log_warning "Changements locaux d√©tect√©s, sauvegarde temporaire..."
    git stash push -m "Sauvegarde automatique Forge $(date)" 2>/dev/null || true
fi

log_success "Conflits Git nettoy√©s"

# 3. Mise √† jour du code source
log_info "üì• Mise √† jour du code source..."
git fetch origin $FORGE_SITE_BRANCH
git reset --hard origin/$FORGE_SITE_BRANCH
log_success "Code source mis √† jour"

# 4. Nettoyage pr√©alable des d√©pendances
log_info "üßπ Nettoyage des anciennes d√©pendances..."
rm -rf vendor/ 2>/dev/null || true
rm -f composer.lock 2>/dev/null || true
log_success "Anciennes d√©pendances supprim√©es"

# 5. Installation des d√©pendances Composer avec nunomaduro/collision
log_info "üì¶ Installation des d√©pendances Composer..."
$FORGE_COMPOSER install --no-dev --no-interaction --prefer-dist --optimize-autoloader
if [ $? -ne 0 ]; then
    log_error "Erreur lors de l'installation Composer"
    exit 1
fi
log_success "D√©pendances Composer install√©es"

# 6. V√©rification que les d√©pendances critiques sont install√©es
log_info "üîç V√©rification des d√©pendances critiques..."
if [ ! -d "vendor/nunomaduro/collision" ]; then
    log_warning "Tentative d'installation manuelle de nunomaduro/collision..."
    $FORGE_COMPOSER require nunomaduro/collision:^7.0 --no-interaction
fi
log_success "D√©pendances critiques v√©rifi√©es"

# 7. G√©n√©ration de la cl√© d'application si n√©cessaire
log_info "üîë V√©rification de la cl√© d'application..."
if ! grep -q "APP_KEY=base64:" .env 2>/dev/null; then
    log_warning "G√©n√©ration d'une nouvelle cl√© d'application..."
    $FORGE_PHP artisan key:generate --force
    log_success "Cl√© d'application g√©n√©r√©e"
else
    log_info "Cl√© d'application d√©j√† pr√©sente"
fi

# 8. Configuration des variables d'environnement admin
log_info "‚öôÔ∏è Configuration des variables admin..."

# Fonction pour mettre √† jour les variables d'environnement
update_env_var() {
    local key=$1
    local value=$2
    
    # √âchapper les valeurs avec des espaces ou des caract√®res sp√©ciaux
    if [[ "$value" == *" "* ]] || [[ "$value" == *"!"* ]]; then
        value="\"${value}\""
    fi
    
    if grep -q "^${key}=" .env 2>/dev/null; then
        sed -i "s/^${key}=.*/${key}=${value}/" .env
    else
        echo "${key}=${value}" >> .env
    fi
}

# Variables pour l'admin (identiques au local)
update_env_var "ADMIN_DEFAULT_EMAIL" "admin@dinor.app"
update_env_var "ADMIN_DEFAULT_PASSWORD" "Dinor2024!Admin"
update_env_var "ADMIN_DEFAULT_NAME" "AdministrateurDinor"

# Variables de production importantes
update_env_var "APP_ENV" "production"
update_env_var "APP_DEBUG" "false"
update_env_var "SESSION_SECURE_COOKIE" "true"
update_env_var "SESSION_SAME_SITE" "lax"

# Variables de cache pour √©viter les erreurs
update_env_var "CACHE_DRIVER" "file"
update_env_var "SESSION_DRIVER" "file"
update_env_var "QUEUE_CONNECTION" "sync"

# Variables de logging
update_env_var "LOG_CHANNEL" "stack"
update_env_var "LOG_DEPRECATIONS_CHANNEL" "null"
update_env_var "LOG_LEVEL" "debug"

log_success "Variables d'environnement configur√©es"

# 9. Nettoyage des caches avant NPM  
log_info "üßπ Nettoyage des caches Laravel..."
$FORGE_PHP artisan optimize:clear || log_warning "Probl√®me avec optimize:clear, mais continue..."
# Nettoyage manuel des caches en cas d'√©chec
rm -rf bootstrap/cache/*.php storage/framework/cache/data/* storage/framework/views/*.php 2>/dev/null || true
log_success "Caches Laravel nettoy√©s"

# 10. Installation compl√®te des d√©pendances NPM
log_info "üì¶ Installation des d√©pendances NPM..."

# Correction compl√®te des permissions NPM (y compris fichiers cach√©s)
log_info "üîê Correction des permissions NPM (fichiers cach√©s inclus)..."
chown -R forge:forge node_modules/ 2>/dev/null || true
chown -R forge:forge package-lock.json 2>/dev/null || true
chown -R forge:forge .npm/ 2>/dev/null || true
# Correction sp√©cifique pour les fichiers cach√©s dans node_modules
find node_modules/ -name ".*" -exec chown forge:forge {} \; 2>/dev/null || true
find node_modules/ -name ".*" -exec chmod 755 {} \; 2>/dev/null || true
chmod -R 755 node_modules/ 2>/dev/null || true

# Suppression compl√®te avec permissions corrig√©es (y compris fichiers cach√©s)
log_info "üóëÔ∏è Suppression compl√®te node_modules et lock files..."
rm -rf node_modules/ 2>/dev/null || true
rm -f package-lock.json 2>/dev/null || true
rm -f .package-lock.json 2>/dev/null || true
rm -rf .npm/ 2>/dev/null || true

# Installation NPM avec gestion d'erreurs am√©lior√©e
log_info "üöÄ Tentative d'installation NPM..."
if npm install --no-fund --no-audit; then
    log_success "D√©pendances NPM install√©es avec succ√®s"
elif npm ci --no-fund --no-audit 2>/dev/null; then
    log_success "D√©pendances NPM install√©es avec npm ci"
elif npm install --force --no-fund --no-audit; then
    log_warning "D√©pendances NPM install√©es avec --force"
else
    log_warning "√âchec NPM standard, tentative avec sudo..."
    # M√©thode de dernier recours avec sudo
    sudo rm -rf node_modules/ package-lock.json .package-lock.json 2>/dev/null || true
    if sudo npm install --no-fund --no-audit; then
        log_warning "D√©pendances NPM install√©es avec sudo (permissions corrig√©es ensuite)"
        # Corriger les permissions apr√®s installation sudo
        sudo chown -R forge:forge node_modules/ package-lock.json 2>/dev/null || true
    else
        log_error "√âchec complet de l'installation NPM - continue sans node_modules"
    fi
fi

# V√©rifier et corriger les permissions finales
chown -R forge:forge node_modules/ 2>/dev/null || true
chmod -R 755 node_modules/ 2>/dev/null || true

# 11. Build des assets de production
log_info "üèóÔ∏è Build des assets de production..."
# Build Laravel assets
npx vite build || npm run build || npm run production
if [ $? -ne 0 ]; then
    log_warning "Build Laravel assets √©chou√©, mais continue..."
fi

# Build PWA Vue.js avec g√©n√©ration de fichiers statiques
log_info "üèóÔ∏è Build PWA Vue.js avec optimisations..."

# G√©n√©rer les fichiers statiques PWA optimis√©s
npm run pwa:build
if [ $? -eq 0 ]; then
    log_success "PWA build√©e avec succ√®s"
    
    # V√©rifier que les fichiers ont √©t√© g√©n√©r√©s
    if [ -d "public/pwa/dist" ]; then
        log_info "üìÅ Fichiers PWA g√©n√©r√©s dans public/pwa/dist/"
        
        # Cr√©er les dossiers de cache si n√©cessaires
        mkdir -p public/pwa/cache
        mkdir -p public/pwa/offline
        
        # Copier les assets critiques pour le cache
        if [ -d "public/pwa/dist/assets" ]; then
            cp -r public/pwa/dist/assets/* public/pwa/cache/ 2>/dev/null || true
        fi
        
        # Cr√©er un fichier de version pour le cache busting
        echo "$(date +%s)" > public/pwa/version.txt
        
        log_success "Cache PWA configur√©"
    else
        log_warning "Dossier PWA dist non trouv√©"
    fi
else
    log_warning "Build PWA √©chou√©, mais continue..."
fi

log_success "Assets build√©s"

# 12. Recr√©ation des dossiers n√©cessaires avec permissions
log_info "üìÅ Cr√©ation des dossiers de storage..."
mkdir -p storage/logs
mkdir -p storage/framework/cache/data
mkdir -p storage/framework/sessions
mkdir -p storage/framework/views
mkdir -p storage/app/public
mkdir -p bootstrap/cache

# Configuration des permissions de base
chmod -R 775 storage bootstrap/cache 2>/dev/null || true
chown -R forge:www-data storage bootstrap/cache 2>/dev/null || true

log_success "Dossiers de storage cr√©√©s avec permissions"

# 13. Migration de la base de donn√©es
log_info "üóÑÔ∏è Migration de la base de donn√©es..."
if [ -f artisan ]; then
    $FORGE_PHP artisan migrate --force
    if [ $? -eq 0 ]; then
        log_success "Migrations ex√©cut√©es"
    else
        log_warning "Probl√®me avec les migrations, mais continue..."
    fi
else
    log_warning "Fichier artisan non trouv√©"
fi

# 14. Configuration de l'utilisateur admin (am√©lior√©)
log_info "üë§ Configuration de l'utilisateur admin..."

# Essayer d'abord le seeder sp√©cialis√© pour la production
if $FORGE_PHP artisan db:seed --class=ProductionAdminSeeder --force 2>/dev/null; then
    log_success "‚úÖ Admin configur√© avec le seeder sp√©cialis√©"
else
    log_warning "Seeder sp√©cialis√© non trouv√©, utilisation du seeder standard..."
    $FORGE_PHP artisan db:seed --class=AdminUserSeeder --force 2>/dev/null || log_warning "Probl√®me avec AdminUserSeeder"
    log_success "‚úÖ Admin configur√© avec le seeder standard"
fi

# Ex√©cuter les seeders manquants pour les panels Filament
log_info "üìã Ex√©cution des seeders manquants pour les panels Filament..."

# CategorySeeder - crucial pour toutes les ressources qui d√©pendent des cat√©gories
if $FORGE_PHP artisan db:seed --class=CategorySeeder --force 2>/dev/null; then
    log_success "‚úÖ CategorySeeder ex√©cut√© (cat√©gories dans Filament)"
else
    log_warning "CategorySeeder non trouv√© ou erreur"
fi

# EventCategoriesSeeder - crucial pour les panels d'√©v√©nements
if $FORGE_PHP artisan db:seed --class=EventCategoriesSeeder --force 2>/dev/null; then
    log_success "‚úÖ EventCategoriesSeeder ex√©cut√©"
else
    log_warning "EventCategoriesSeeder non trouv√© ou erreur"
fi

# IngredientsSeeder - pour les ingr√©dients
if $FORGE_PHP artisan db:seed --class=IngredientsSeeder --force 2>/dev/null; then
    log_success "‚úÖ IngredientsSeeder ex√©cut√©"
else
    log_warning "IngredientsSeeder non trouv√© ou erreur"
fi

# PwaMenuItemSeeder - pour le panel Menu PWA
if $FORGE_PHP artisan db:seed --class=PwaMenuItemSeeder --force 2>/dev/null; then
    log_success "‚úÖ PwaMenuItemSeeder ex√©cut√© (Menu PWA dans Filament)"
else
    log_warning "PwaMenuItemSeeder non trouv√© ou erreur"
fi

# UserSeeder - pour cr√©er des utilisateurs test (panel Utilisateurs)
if $FORGE_PHP artisan db:seed --class=UserSeeder --force 2>/dev/null; then
    log_success "‚úÖ UserSeeder ex√©cut√© (Utilisateurs dans Filament)"
else
    log_warning "UserSeeder non trouv√© ou erreur"
fi

# ProductionDataSeeder - pour cr√©er du contenu Dinor TV, etc.
if $FORGE_PHP artisan db:seed --class=ProductionDataSeeder --force 2>/dev/null; then
    log_success "‚úÖ ProductionDataSeeder ex√©cut√© (contenu Dinor TV, etc.)"
else
    log_warning "ProductionDataSeeder non trouv√© ou erreur"
fi

log_success "‚úÖ Tous les seeders Filament ex√©cut√©s"

# V√©rification que l'admin est bien cr√©√©
ADMIN_CHECK=$($FORGE_PHP artisan tinker --execute="
\$admin = App\\Models\\AdminUser::where('email', 'admin@dinor.app')->first();
if (\$admin && \$admin->is_active) {
    echo 'ADMIN_OK:' . \$admin->id . ':' . \$admin->name;
} else {
    echo 'ADMIN_PROBLEM';
}" 2>/dev/null | grep -E "ADMIN_OK|ADMIN_PROBLEM")

if [[ $ADMIN_CHECK == *"ADMIN_OK"* ]]; then
    ADMIN_ID=$(echo $ADMIN_CHECK | cut -d':' -f2)
    ADMIN_NAME=$(echo $ADMIN_CHECK | cut -d':' -f3)
    log_success "Admin v√©rifi√© et op√©rationnel (ID: $ADMIN_ID - $ADMIN_NAME)"
else
    log_warning "Tentative de cr√©ation manuelle de l'admin..."
    
    # Cr√©ation manuelle en cas d'√©chec des seeders
    $FORGE_PHP artisan tinker --execute="
    try {
        \$admin = App\\Models\\AdminUser::updateOrCreate(
            ['email' => 'admin@dinor.app'],
            [
                                 'name' => 'AdministrateurDinor',
                'password' => bcrypt('Dinor2024!Admin'),
                'email_verified_at' => now(),
                'is_active' => true
            ]
        );
        echo 'MANUAL_ADMIN_OK:' . \$admin->id;
    } catch (Exception \$e) {
        echo 'MANUAL_ADMIN_FAILED:' . \$e->getMessage();
    }
    " 2>/dev/null || log_error "Cr√©ation manuelle √©chou√©e"
fi

# 15. Lien symbolique de stockage
log_info "üîó Cr√©ation du lien symbolique de stockage..."
$FORGE_PHP artisan storage:link || log_warning "Lien symbolique d√©j√† existant"
log_success "Lien symbolique v√©rifi√©"

# 16. Optimisation Laravel pour la production
log_info "‚ö° Optimisation Laravel..."
$FORGE_PHP artisan config:cache
$FORGE_PHP artisan route:cache
$FORGE_PHP artisan view:cache
log_success "Optimisations appliqu√©es"

# 16.5. V√©rification conditionnelle des caches Filament/Livewire
log_info "üîç V√©rification des changements n√©cessitant un vidage de cache..."

# V√©rifier si des fichiers critiques ont chang√© dans le dernier commit
CACHE_CRITICAL_CHANGES=$(git diff HEAD~1 --name-only 2>/dev/null | grep -E "(config/|routes/|app/Filament.*\.php|app/Livewire.*\.php|app/.*Resource.*\.php)" | wc -l)

if [ "$CACHE_CRITICAL_CHANGES" -gt 0 ]; then
    log_warning "üîÑ Changements d√©tect√©s dans les composants Filament/Livewire ($CACHE_CRITICAL_CHANGES fichiers)"
    log_info "üìÇ Fichiers modifi√©s:"
    git diff HEAD~1 --name-only 2>/dev/null | grep -E "(config/|routes/|app/Filament.*\.php|app/Livewire.*\.php|app/.*Resource.*\.php)" | sed 's/^/   - /'
    
    log_info "üßπ Vidage des caches Filament et red√©couverte des composants..."
    
    # Vider les caches Laravel sp√©cifiques
    $FORGE_PHP artisan cache:clear || log_warning "Probl√®me avec cache:clear"
    $FORGE_PHP artisan config:clear || log_warning "Probl√®me avec config:clear"
    $FORGE_PHP artisan view:clear || log_warning "Probl√®me avec view:clear"
    $FORGE_PHP artisan route:clear || log_warning "Probl√®me avec route:clear"
    
    # Red√©couverte des composants Livewire
    if $FORGE_PHP artisan livewire:discover 2>/dev/null; then
        log_success "‚úÖ Composants Livewire red√©couverts"
    else
        log_warning "‚ö†Ô∏è Commande livewire:discover non disponible ou √©chou√©e"
    fi
    
    # Vider les caches PWA
    $FORGE_PHP artisan tinker --execute="
    try {
        \Illuminate\Support\Facades\Cache::tags(['pwa', 'recipes', 'events', 'tips', 'dinor-tv', 'pages'])->flush();
        echo 'PWA_CACHE_CLEARED';
    } catch (Exception \$e) {
        echo 'PWA_CACHE_ERROR:' . \$e->getMessage();
    }
    " 2>/dev/null | grep -q "PWA_CACHE_CLEARED" && log_success "‚úÖ Caches PWA vid√©s" || log_warning "‚ö†Ô∏è Probl√®me avec les caches PWA"
    
    # Optimiser l'autoloader
    $FORGE_COMPOSER dump-autoload --optimize || log_warning "Probl√®me avec dump-autoload"
    
    # Reconstruire les caches optimis√©s
    $FORGE_PHP artisan config:cache
    $FORGE_PHP artisan route:cache
    $FORGE_PHP artisan view:cache
    
    log_success "‚úÖ Caches Filament/Livewire mis √† jour"
else
    log_info "‚úÖ Aucun changement critique d√©tect√© - pas de vidage de cache n√©cessaire"
fi

# 17. Configuration des permissions (s√©curis√© pour Forge)
log_info "üîß Configuration des permissions..."
chmod -R 755 storage bootstrap/cache 2>/dev/null || true
chown -R forge:forge storage bootstrap/cache 2>/dev/null || true
log_success "Permissions configur√©es"

# 18. V√©rification finale de l'√©tat de l'application
log_info "üîç V√©rification finale..."

# Test rapide de la connexion √† la base de donn√©es
if $FORGE_PHP artisan migrate:status >/dev/null 2>&1; then
    log_success "Connexion base de donn√©es OK"
else
    log_warning "Probl√®me potentiel avec la base de donn√©es"
fi

# V√©rification finale de l'admin
FINAL_ADMIN_CHECK=$($FORGE_PHP artisan tinker --execute="
\$admin = App\\Models\\AdminUser::where('email', 'admin@dinor.app')->first();
echo \$admin ? 'FINAL_ADMIN_EXISTS' : 'FINAL_ADMIN_MISSING';
" 2>/dev/null | grep "FINAL_ADMIN")

if [[ $FINAL_ADMIN_CHECK == *"EXISTS"* ]]; then
    log_success "V√©rification finale admin: ‚úÖ OK"
else
    log_warning "V√©rification finale admin: ‚ö†Ô∏è Probl√®me potentiel"
fi

# 19. Rechargement PHP-FPM (comme dans le script original)
log_info "üîÑ Rechargement PHP-FPM..."
touch /tmp/fpmlock 2>/dev/null || true
( flock -w 10 9 || exit 1
    echo 'Rechargement PHP FPM...'; sudo -S service $FORGE_PHP_FPM reload ) 9</tmp/fpmlock 2>/dev/null || log_warning "Rechargement PHP-FPM √©chou√©"

# 20. Sortie du mode maintenance
log_info "üü¢ Sortie du mode maintenance..."
$FORGE_PHP artisan up
log_success "Application remise en ligne"

echo ""
echo "üéâ === D√âPLOIEMENT FORGE TERMIN√â AVEC SUCC√àS ==="
echo ""
echo "üìã Informations de connexion admin:"
echo "   üåê Dashboard: https://new.dinorapp.com/admin/login"
echo "   üìß Email: admin@dinor.app"
echo "   üîë Mot de passe: Dinor2024!Admin"
echo ""
echo "üìã V√©rifications recommand√©es:"
echo "   - API Test: https://new.dinorapp.com/api/test/database-check"
echo "   - Logs: storage/logs/laravel.log"
echo ""
echo "üí° Note: Identifiants admin identiques au d√©veloppement local"
echo ""
echo "‚úÖ D√©ploiement termin√©!" 